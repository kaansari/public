# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.21.4

    - name: Go Mod
      run: go mod tidy

    - name: Install dependencies
      run: |
          go get .
          go get google.golang.org/protobuf
          go get google.golang.org/grpc/credentials

    - name: Copy key directory and vectara.cer
      run: |
        mkdir -p $GITHUB_WORKSPACE/build/key
        cp -R key/* $GITHUB_WORKSPACE/build/key/
        cp vectara.cer $GITHUB_WORKSPACE/build/key/

    - name: Build
      run: go build -o $GITHUB_WORKSPACE/build/myapp

    - name: list artifacts
      run: |
         ls $GITHUB_WORKSPACE/build -al

    - name: Secure Copy artifacts
      run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.OC_SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa -r $GITHUB_WORKSPACE/build/* ubuntu@${{ secrets.OC_VM_HOST }}:/home/ubuntu/

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create and Start service on Ubuntu VM
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.OC_VM_HOST }}
        username: ubuntu
        key: ${{ secrets.OC_SSH_KEY }}
        script: |
          echo "[Unit]
          Description=Vectara Service
          After=network.target

          [Service]
          ExecStart=/home/ubuntu/myapp
          Restart=always
          RestartSec=3
          LimitNOFILE=4096
          WorkingDirectory=/home/ubuntu  # Set the working directory to the location of myapp

          [Install]
          WantedBy=multi-user.target" | sudo tee /etc/systemd/system/vectara.service

          sudo systemctl daemon-reload
          sudo systemctl start vectara.service

