# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go


name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Build with Docker
      run: |
        docker build -t my-go-app-builder - <<EOF
          FROM oraclelinux:8-slim

          # Install required packages using microdnf
          RUN microdnf install -y gcc make git

          # Install Go 1.21.4
          WORKDIR /usr/local
          RUN curl -LO https://golang.org/dl/go1.21.4.linux-amd64.tar.gz
          RUN tar -C /usr/local -xzf go1.21.4.linux-amd64.tar.gz
          ENV PATH=$PATH:/usr/local/go/bin

          # Copy and build the Go application
          WORKDIR /src
          COPY . .
          CMD ["ls -al"]
          RUN go build -o myapp 2>&1 | tee build.log
          CMD ["./myapp"]

        EOF

        docker run --rm -v "$(pwd):/src" my-go-app-builder
    - name: Deploy to Oracle Cloud VM
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.OC_VM_HOST }}
        username: opc
        key: ${{ secrets.OC_SSH_KEY }}
        script: |
          sudo systemctl stop vectara.service || true  # Stop the service if it's running, ignore errors
          scp -i /path/to/private-key myapp opc@${{ secrets.OC_VM_HOST }}:/home/opc/apps
          sudo systemctl start vectara.service
