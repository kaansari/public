// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.8.0
// source: admin.proto

package admin

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	status "vectara.com/public/proto/status"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterAttributeType int32

const (
	FilterAttributeType_FILTER_ATTRIBUTE_TYPE__UNDEFINED    FilterAttributeType = 0
	FilterAttributeType_FILTER_ATTRIBUTE_TYPE__INTEGER      FilterAttributeType = 5
	FilterAttributeType_FILTER_ATTRIBUTE_TYPE__INTEGER_LIST FilterAttributeType = 10
	FilterAttributeType_FILTER_ATTRIBUTE_TYPE__REAL         FilterAttributeType = 15
	FilterAttributeType_FILTER_ATTRIBUTE_TYPE__REAL_LIST    FilterAttributeType = 20
	FilterAttributeType_FILTER_ATTRIBUTE_TYPE__TEXT         FilterAttributeType = 25
	FilterAttributeType_FILTER_ATTRIBUTE_TYPE__TEXT_LIST    FilterAttributeType = 30
	FilterAttributeType_FILTER_ATTRIBUTE_TYPE__BOOLEAN      FilterAttributeType = 35
)

// Enum value maps for FilterAttributeType.
var (
	FilterAttributeType_name = map[int32]string{
		0:  "FILTER_ATTRIBUTE_TYPE__UNDEFINED",
		5:  "FILTER_ATTRIBUTE_TYPE__INTEGER",
		10: "FILTER_ATTRIBUTE_TYPE__INTEGER_LIST",
		15: "FILTER_ATTRIBUTE_TYPE__REAL",
		20: "FILTER_ATTRIBUTE_TYPE__REAL_LIST",
		25: "FILTER_ATTRIBUTE_TYPE__TEXT",
		30: "FILTER_ATTRIBUTE_TYPE__TEXT_LIST",
		35: "FILTER_ATTRIBUTE_TYPE__BOOLEAN",
	}
	FilterAttributeType_value = map[string]int32{
		"FILTER_ATTRIBUTE_TYPE__UNDEFINED":    0,
		"FILTER_ATTRIBUTE_TYPE__INTEGER":      5,
		"FILTER_ATTRIBUTE_TYPE__INTEGER_LIST": 10,
		"FILTER_ATTRIBUTE_TYPE__REAL":         15,
		"FILTER_ATTRIBUTE_TYPE__REAL_LIST":    20,
		"FILTER_ATTRIBUTE_TYPE__TEXT":         25,
		"FILTER_ATTRIBUTE_TYPE__TEXT_LIST":    30,
		"FILTER_ATTRIBUTE_TYPE__BOOLEAN":      35,
	}
)

func (x FilterAttributeType) Enum() *FilterAttributeType {
	p := new(FilterAttributeType)
	*p = x
	return p
}

func (x FilterAttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterAttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[0].Descriptor()
}

func (FilterAttributeType) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[0]
}

func (x FilterAttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterAttributeType.Descriptor instead.
func (FilterAttributeType) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{0}
}

type FilterAttributeLevel int32

const (
	FilterAttributeLevel_FILTER_ATTRIBUTE_LEVEL__UNDEFINED FilterAttributeLevel = 0
	// Document-level attribute
	FilterAttributeLevel_FILTER_ATTRIBUTE_LEVEL__DOCUMENT FilterAttributeLevel = 5
	// Part-level attribute
	FilterAttributeLevel_FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART FilterAttributeLevel = 10
)

// Enum value maps for FilterAttributeLevel.
var (
	FilterAttributeLevel_name = map[int32]string{
		0:  "FILTER_ATTRIBUTE_LEVEL__UNDEFINED",
		5:  "FILTER_ATTRIBUTE_LEVEL__DOCUMENT",
		10: "FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART",
	}
	FilterAttributeLevel_value = map[string]int32{
		"FILTER_ATTRIBUTE_LEVEL__UNDEFINED":     0,
		"FILTER_ATTRIBUTE_LEVEL__DOCUMENT":      5,
		"FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART": 10,
	}
)

func (x FilterAttributeLevel) Enum() *FilterAttributeLevel {
	p := new(FilterAttributeLevel)
	*p = x
	return p
}

func (x FilterAttributeLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterAttributeLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[1].Descriptor()
}

func (FilterAttributeLevel) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[1]
}

func (x FilterAttributeLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterAttributeLevel.Descriptor instead.
func (FilterAttributeLevel) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{1}
}

type Corpus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Corpus ID.
	// This value is ignored during Corpus creation.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the corpus.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A description for the corpus.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The time at which the corpus was provisioned.
	// This value is ignored during Corpus creation.
	DtProvision int64 `protobuf:"varint,4,opt,name=dt_provision,json=dtProvision,proto3" json:"dt_provision,omitempty"`
	// Whether the corpus is enabled for use or not.
	// This value is ignored during Corpus creation.
	Enabled  bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	SwapQenc bool `protobuf:"varint,6,opt,name=swap_qenc,json=swapQenc,proto3" json:"swap_qenc,omitempty"`
	// The default query encoder is designed for normal question-answering types
	// of queries when the text contains the answer.  Swapping the index encoder
	// is generally rare, but can be used to help directly match questions to
	// questions.  This can be useful if you have a FAQ dataset and you want to
	// directly match the user question to the question in the FAQ.
	SwapIenc bool `protobuf:"varint,7,opt,name=swap_ienc,json=swapIenc,proto3" json:"swap_ienc,omitempty"`
	// When a corpus is "textless", Vectara does not store the original text.
	// Instead, Vectara converts the text to vectors and only retains metadata.
	Textless bool `protobuf:"varint,8,opt,name=textless,proto3" json:"textless,omitempty"`
	// Encryption is on by default and cannot be turned off.
	Encrypted bool `protobuf:"varint,9,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// This is an advanced setting for changing the underlying model type.  The
	// default value is "1", which is Vectara's high-performing global model.
	// Underlying models may be swapped for some paying customers by contacting
	// our support team.
	EncoderId uint64 `protobuf:"varint,10,opt,name=encoder_id,json=encoderId,proto3" json:"encoder_id,omitempty"`
	// An optional maximum size of the metadata that each document can contain.
	MetadataMaxBytes uint32             `protobuf:"varint,11,opt,name=metadata_max_bytes,json=metadataMaxBytes,proto3" json:"metadata_max_bytes,omitempty"`
	CustomDimensions []*Dimension       `protobuf:"bytes,13,rep,name=custom_dimensions,json=customDimensions,proto3" json:"custom_dimensions,omitempty"`
	FilterAttributes []*FilterAttribute `protobuf:"bytes,14,rep,name=filter_attributes,json=filterAttributes,proto3" json:"filter_attributes,omitempty"`
}

func (x *Corpus) Reset() {
	*x = Corpus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Corpus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Corpus) ProtoMessage() {}

func (x *Corpus) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Corpus.ProtoReflect.Descriptor instead.
func (*Corpus) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{0}
}

func (x *Corpus) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Corpus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Corpus) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Corpus) GetDtProvision() int64 {
	if x != nil {
		return x.DtProvision
	}
	return 0
}

func (x *Corpus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Corpus) GetSwapQenc() bool {
	if x != nil {
		return x.SwapQenc
	}
	return false
}

func (x *Corpus) GetSwapIenc() bool {
	if x != nil {
		return x.SwapIenc
	}
	return false
}

func (x *Corpus) GetTextless() bool {
	if x != nil {
		return x.Textless
	}
	return false
}

func (x *Corpus) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *Corpus) GetEncoderId() uint64 {
	if x != nil {
		return x.EncoderId
	}
	return 0
}

func (x *Corpus) GetMetadataMaxBytes() uint32 {
	if x != nil {
		return x.MetadataMaxBytes
	}
	return 0
}

func (x *Corpus) GetCustomDimensions() []*Dimension {
	if x != nil {
		return x.CustomDimensions
	}
	return nil
}

func (x *Corpus) GetFilterAttributes() []*FilterAttribute {
	if x != nil {
		return x.FilterAttributes
	}
	return nil
}

// A custom dimension is additional numeric metadata that you want to affect
// Vectara's scoring.  For example, these could be "number of stars" ratings,
// or other business metrics like a product's margins that you want to use
// to boost where a result is in the list.
type Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the custom dimension.  The maximum length of the name is
	// 8 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A description for the custom dimension.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The default weight to give this dimension when running queries. A value of
	// 0.0, for example, gives it no weight at all.
	ServingDefault float64 `protobuf:"fixed64,3,opt,name=serving_default,json=servingDefault,proto3" json:"serving_default,omitempty"`
	// The default value to give to documents for this custom dimension.
	IndexingDefault float64 `protobuf:"fixed64,4,opt,name=indexing_default,json=indexingDefault,proto3" json:"indexing_default,omitempty"`
}

func (x *Dimension) Reset() {
	*x = Dimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimension) ProtoMessage() {}

func (x *Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimension.ProtoReflect.Descriptor instead.
func (*Dimension) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{1}
}

func (x *Dimension) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dimension) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Dimension) GetServingDefault() float64 {
	if x != nil {
		return x.ServingDefault
	}
	return 0
}

func (x *Dimension) GetIndexingDefault() float64 {
	if x != nil {
		return x.IndexingDefault
	}
	return 0
}

// Defines metadata fields that can be used in predicate queries.
type FilterAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the field, as seen in metadata.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// An optional description.
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// Whether the field is indexed for maximum query speed.
	Indexed bool `protobuf:"varint,15,opt,name=indexed,proto3" json:"indexed,omitempty"`
	// The data type of the attribute.
	Type FilterAttributeType `protobuf:"varint,20,opt,name=type,proto3,enum=com.vectara.admin.FilterAttributeType" json:"type,omitempty"`
	// Whether the attribute lives at the document or part level.
	Level FilterAttributeLevel `protobuf:"varint,25,opt,name=level,proto3,enum=com.vectara.admin.FilterAttributeLevel" json:"level,omitempty"`
}

func (x *FilterAttribute) Reset() {
	*x = FilterAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAttribute) ProtoMessage() {}

func (x *FilterAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAttribute.ProtoReflect.Descriptor instead.
func (*FilterAttribute) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{2}
}

func (x *FilterAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilterAttribute) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FilterAttribute) GetIndexed() bool {
	if x != nil {
		return x.Indexed
	}
	return false
}

func (x *FilterAttribute) GetType() FilterAttributeType {
	if x != nil {
		return x.Type
	}
	return FilterAttributeType_FILTER_ATTRIBUTE_TYPE__UNDEFINED
}

func (x *FilterAttribute) GetLevel() FilterAttributeLevel {
	if x != nil {
		return x.Level
	}
	return FilterAttributeLevel_FILTER_ATTRIBUTE_LEVEL__UNDEFINED
}

type CreateCorpusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corpus *Corpus `protobuf:"bytes,1,opt,name=corpus,proto3" json:"corpus,omitempty"`
}

func (x *CreateCorpusRequest) Reset() {
	*x = CreateCorpusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCorpusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCorpusRequest) ProtoMessage() {}

func (x *CreateCorpusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCorpusRequest.ProtoReflect.Descriptor instead.
func (*CreateCorpusRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCorpusRequest) GetCorpus() *Corpus {
	if x != nil {
		return x.Corpus
	}
	return nil
}

type CreateCorpusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Corpus ID that was created.
	CorpusId uint32         `protobuf:"varint,1,opt,name=corpus_id,json=corpusId,proto3" json:"corpus_id,omitempty"`
	Status   *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateCorpusResponse) Reset() {
	*x = CreateCorpusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCorpusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCorpusResponse) ProtoMessage() {}

func (x *CreateCorpusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCorpusResponse.ProtoReflect.Descriptor instead.
func (*CreateCorpusResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCorpusResponse) GetCorpusId() uint32 {
	if x != nil {
		return x.CorpusId
	}
	return 0
}

func (x *CreateCorpusResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteCorpusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Customer ID that contains the corpus to be deleted.
	CustomerId uint32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// The Corpus ID to be deleted.
	CorpusId uint32 `protobuf:"varint,2,opt,name=corpus_id,json=corpusId,proto3" json:"corpus_id,omitempty"`
}

func (x *DeleteCorpusRequest) Reset() {
	*x = DeleteCorpusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCorpusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCorpusRequest) ProtoMessage() {}

func (x *DeleteCorpusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCorpusRequest.ProtoReflect.Descriptor instead.
func (*DeleteCorpusRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteCorpusRequest) GetCustomerId() uint32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *DeleteCorpusRequest) GetCorpusId() uint32 {
	if x != nil {
		return x.CorpusId
	}
	return 0
}

type DeleteCorpusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteCorpusResponse) Reset() {
	*x = DeleteCorpusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCorpusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCorpusResponse) ProtoMessage() {}

func (x *DeleteCorpusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCorpusResponse.ProtoReflect.Descriptor instead.
func (*DeleteCorpusResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCorpusResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ResetCorpusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Customer ID that contains the corpus to be reset.
	CustomerId uint32 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// The Corpus ID to be reset.
	CorpusId uint32 `protobuf:"varint,2,opt,name=corpus_id,json=corpusId,proto3" json:"corpus_id,omitempty"`
}

func (x *ResetCorpusRequest) Reset() {
	*x = ResetCorpusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCorpusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCorpusRequest) ProtoMessage() {}

func (x *ResetCorpusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCorpusRequest.ProtoReflect.Descriptor instead.
func (*ResetCorpusRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{7}
}

func (x *ResetCorpusRequest) GetCustomerId() uint32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *ResetCorpusRequest) GetCorpusId() uint32 {
	if x != nil {
		return x.CorpusId
	}
	return 0
}

type ResetCorpusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ResetCorpusResponse) Reset() {
	*x = ResetCorpusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetCorpusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCorpusResponse) ProtoMessage() {}

func (x *ResetCorpusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCorpusResponse.ProtoReflect.Descriptor instead.
func (*ResetCorpusResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{8}
}

func (x *ResetCorpusResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListCorporaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A regex over the names and descriptions to match corpora against.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// The maximum results to return.
	NumResults uint32 `protobuf:"varint,4,opt,name=num_results,json=numResults,proto3" json:"num_results,omitempty"`
	// A key that is passed in to retrieve a specific page of results.
	PageKey []byte `protobuf:"bytes,5,opt,name=page_key,json=pageKey,proto3" json:"page_key,omitempty"`
}

func (x *ListCorporaRequest) Reset() {
	*x = ListCorporaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCorporaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCorporaRequest) ProtoMessage() {}

func (x *ListCorporaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCorporaRequest.ProtoReflect.Descriptor instead.
func (*ListCorporaRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{9}
}

func (x *ListCorporaRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListCorporaRequest) GetNumResults() uint32 {
	if x != nil {
		return x.NumResults
	}
	return 0
}

func (x *ListCorporaRequest) GetPageKey() []byte {
	if x != nil {
		return x.PageKey
	}
	return nil
}

type ListCorporaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corpus []*Corpus `protobuf:"bytes,1,rep,name=corpus,proto3" json:"corpus,omitempty"`
	// A key that is passed into a subsequent result in order to
	// retrieve the next page of results.
	PageKey []byte         `protobuf:"bytes,2,opt,name=page_key,json=pageKey,proto3" json:"page_key,omitempty"`
	Status  *status.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListCorporaResponse) Reset() {
	*x = ListCorporaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCorporaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCorporaResponse) ProtoMessage() {}

func (x *ListCorporaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCorporaResponse.ProtoReflect.Descriptor instead.
func (*ListCorporaResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{10}
}

func (x *ListCorporaResponse) GetCorpus() []*Corpus {
	if x != nil {
		return x.Corpus
	}
	return nil
}

func (x *ListCorporaResponse) GetPageKey() []byte {
	if x != nil {
		return x.PageKey
	}
	return nil
}

func (x *ListCorporaResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateCorpusEnablementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The corpus to enable or disable.
	CorpusId uint32 `protobuf:"varint,1,opt,name=corpus_id,json=corpusId,proto3" json:"corpus_id,omitempty"`
	// If true, enable the corpus. Otherwise, disable it.
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *UpdateCorpusEnablementRequest) Reset() {
	*x = UpdateCorpusEnablementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCorpusEnablementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCorpusEnablementRequest) ProtoMessage() {}

func (x *UpdateCorpusEnablementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCorpusEnablementRequest.ProtoReflect.Descriptor instead.
func (*UpdateCorpusEnablementRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateCorpusEnablementRequest) GetCorpusId() uint32 {
	if x != nil {
		return x.CorpusId
	}
	return 0
}

func (x *UpdateCorpusEnablementRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type UpdateCorpusEnablementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateCorpusEnablementResponse) Reset() {
	*x = UpdateCorpusEnablementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCorpusEnablementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCorpusEnablementResponse) ProtoMessage() {}

func (x *UpdateCorpusEnablementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCorpusEnablementResponse.ProtoReflect.Descriptor instead.
func (*UpdateCorpusEnablementResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateCorpusEnablementResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CorpusSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time at which the size was calculated.
	EpochSecs int64 `protobuf:"varint,1,opt,name=epoch_secs,json=epochSecs,proto3" json:"epoch_secs,omitempty"`
	// The size of the corpus.
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *CorpusSize) Reset() {
	*x = CorpusSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorpusSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorpusSize) ProtoMessage() {}

func (x *CorpusSize) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorpusSize.ProtoReflect.Descriptor instead.
func (*CorpusSize) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{13}
}

func (x *CorpusSize) GetEpochSecs() int64 {
	if x != nil {
		return x.EpochSecs
	}
	return 0
}

func (x *CorpusSize) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ReadCorpusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corpora IDs to read.
	CorpusId []uint32 `protobuf:"varint,1,rep,packed,name=corpus_id,json=corpusId,proto3" json:"corpus_id,omitempty"`
	// Subset of information to read.
	// Set to true to read basic information about the corpus such as id, name,
	// description, enabled, etc.
	ReadBasicInfo bool `protobuf:"varint,1000,opt,name=read_basic_info,json=readBasicInfo,proto3" json:"read_basic_info,omitempty"`
	// Set to true to read the size of the corpus.
	ReadSize bool `protobuf:"varint,1001,opt,name=read_size,json=readSize,proto3" json:"read_size,omitempty"`
	// Set to true to read the API keys associated with the corpus.
	ReadApiKeys bool `protobuf:"varint,1003,opt,name=read_api_keys,json=readApiKeys,proto3" json:"read_api_keys,omitempty"`
	// Set to true to read the custom dimensions of the corpus.
	ReadCustomDimensions bool `protobuf:"varint,1004,opt,name=read_custom_dimensions,json=readCustomDimensions,proto3" json:"read_custom_dimensions,omitempty"`
	// Set to true to read the filter attributes of the corpus.
	ReadFilterAttributes bool `protobuf:"varint,1005,opt,name=read_filter_attributes,json=readFilterAttributes,proto3" json:"read_filter_attributes,omitempty"`
}

func (x *ReadCorpusRequest) Reset() {
	*x = ReadCorpusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCorpusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCorpusRequest) ProtoMessage() {}

func (x *ReadCorpusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCorpusRequest.ProtoReflect.Descriptor instead.
func (*ReadCorpusRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{14}
}

func (x *ReadCorpusRequest) GetCorpusId() []uint32 {
	if x != nil {
		return x.CorpusId
	}
	return nil
}

func (x *ReadCorpusRequest) GetReadBasicInfo() bool {
	if x != nil {
		return x.ReadBasicInfo
	}
	return false
}

func (x *ReadCorpusRequest) GetReadSize() bool {
	if x != nil {
		return x.ReadSize
	}
	return false
}

func (x *ReadCorpusRequest) GetReadApiKeys() bool {
	if x != nil {
		return x.ReadApiKeys
	}
	return false
}

func (x *ReadCorpusRequest) GetReadCustomDimensions() bool {
	if x != nil {
		return x.ReadCustomDimensions
	}
	return false
}

func (x *ReadCorpusRequest) GetReadFilterAttributes() bool {
	if x != nil {
		return x.ReadFilterAttributes
	}
	return false
}

type ReadCorpusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the requested corpora.
	Corpora []*ReadCorpusResponse_CorpusInfo `protobuf:"bytes,1,rep,name=corpora,proto3" json:"corpora,omitempty"`
}

func (x *ReadCorpusResponse) Reset() {
	*x = ReadCorpusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCorpusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCorpusResponse) ProtoMessage() {}

func (x *ReadCorpusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCorpusResponse.ProtoReflect.Descriptor instead.
func (*ReadCorpusResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{15}
}

func (x *ReadCorpusResponse) GetCorpora() []*ReadCorpusResponse_CorpusInfo {
	if x != nil {
		return x.Corpora
	}
	return nil
}

type ComputeCorpusSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The corpus for which to compute the size.
	CorpusId uint32 `protobuf:"varint,1,opt,name=corpus_id,json=corpusId,proto3" json:"corpus_id,omitempty"`
}

func (x *ComputeCorpusSizeRequest) Reset() {
	*x = ComputeCorpusSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeCorpusSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeCorpusSizeRequest) ProtoMessage() {}

func (x *ComputeCorpusSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeCorpusSizeRequest.ProtoReflect.Descriptor instead.
func (*ComputeCorpusSizeRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{16}
}

func (x *ComputeCorpusSizeRequest) GetCorpusId() uint32 {
	if x != nil {
		return x.CorpusId
	}
	return 0
}

type ComputeCorpusSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The size of the corpus.
	Size *CorpusSize `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	// The status of the size computation.
	Status *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ComputeCorpusSizeResponse) Reset() {
	*x = ComputeCorpusSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeCorpusSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeCorpusSizeResponse) ProtoMessage() {}

func (x *ComputeCorpusSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeCorpusSizeResponse.ProtoReflect.Descriptor instead.
func (*ComputeCorpusSizeResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{17}
}

func (x *ComputeCorpusSizeResponse) GetSize() *CorpusSize {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *ComputeCorpusSizeResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ReplaceCorpusFilterAttrsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The corpus for which to update filters.
	CorpusId uint32 `protobuf:"varint,1,opt,name=corpus_id,json=corpusId,proto3" json:"corpus_id,omitempty"`
	// The filters to set. The existing filters are replaced with this list of filters.
	FilterAttributes []*FilterAttribute `protobuf:"bytes,10,rep,name=filter_attributes,json=filterAttributes,proto3" json:"filter_attributes,omitempty"`
}

func (x *ReplaceCorpusFilterAttrsRequest) Reset() {
	*x = ReplaceCorpusFilterAttrsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceCorpusFilterAttrsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceCorpusFilterAttrsRequest) ProtoMessage() {}

func (x *ReplaceCorpusFilterAttrsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceCorpusFilterAttrsRequest.ProtoReflect.Descriptor instead.
func (*ReplaceCorpusFilterAttrsRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{18}
}

func (x *ReplaceCorpusFilterAttrsRequest) GetCorpusId() uint32 {
	if x != nil {
		return x.CorpusId
	}
	return 0
}

func (x *ReplaceCorpusFilterAttrsRequest) GetFilterAttributes() []*FilterAttribute {
	if x != nil {
		return x.FilterAttributes
	}
	return nil
}

type ReplaceCorpusFilterAttrsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *status.Status `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	// If 'status' represents success, this contains the ID assigned to the job
	// for updating the list of filters. This ID can be used to query the status
	// of the job.
	JobId string `protobuf:"bytes,10,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *ReplaceCorpusFilterAttrsResponse) Reset() {
	*x = ReplaceCorpusFilterAttrsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceCorpusFilterAttrsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceCorpusFilterAttrsResponse) ProtoMessage() {}

func (x *ReplaceCorpusFilterAttrsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceCorpusFilterAttrsResponse.ProtoReflect.Descriptor instead.
func (*ReplaceCorpusFilterAttrsResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{19}
}

func (x *ReplaceCorpusFilterAttrsResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReplaceCorpusFilterAttrsResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// A Corpus information object containing the requested information.
type ReadCorpusResponse_CorpusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only requested fields are populated.
	Corpus *Corpus `protobuf:"bytes,1,opt,name=corpus,proto3" json:"corpus,omitempty"`
	// Status of the corpus.
	CorpusStatus *status.Status `protobuf:"bytes,1001,opt,name=corpus_status,json=corpusStatus,proto3" json:"corpus_status,omitempty"`
	// Size of the corpus. Only populated if read_size is true.
	Size *CorpusSize `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	// Status of the size.
	SizeStatus *status.Status `protobuf:"bytes,1002,opt,name=size_status,json=sizeStatus,proto3" json:"size_status,omitempty"`
	// API keys associated with the corpus. Only populated if read_api_keys is true.
	ApiKey []*ApiKey `protobuf:"bytes,4,rep,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Status of the API keys.
	ApiKeyStatus *status.Status `protobuf:"bytes,1004,opt,name=api_key_status,json=apiKeyStatus,proto3" json:"api_key_status,omitempty"`
	// Custom dimensions of the corpus. Only populated if read_custom_dimensions is true.
	CustomDimension []*Dimension `protobuf:"bytes,5,rep,name=custom_dimension,json=customDimension,proto3" json:"custom_dimension,omitempty"`
	// Status of the custom dimensions.
	CustomDimensionStatus *status.Status `protobuf:"bytes,1005,opt,name=custom_dimension_status,json=customDimensionStatus,proto3" json:"custom_dimension_status,omitempty"`
	// Filter attributes of the corpus. Only populated if read_filter_attributes is true.
	FilterAttribute []*FilterAttribute `protobuf:"bytes,6,rep,name=filter_attribute,json=filterAttribute,proto3" json:"filter_attribute,omitempty"`
	// Status of the filter attributes.
	FilterAttributeStatus *status.Status `protobuf:"bytes,1006,opt,name=filter_attribute_status,json=filterAttributeStatus,proto3" json:"filter_attribute_status,omitempty"`
}

func (x *ReadCorpusResponse_CorpusInfo) Reset() {
	*x = ReadCorpusResponse_CorpusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCorpusResponse_CorpusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCorpusResponse_CorpusInfo) ProtoMessage() {}

func (x *ReadCorpusResponse_CorpusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCorpusResponse_CorpusInfo.ProtoReflect.Descriptor instead.
func (*ReadCorpusResponse_CorpusInfo) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ReadCorpusResponse_CorpusInfo) GetCorpus() *Corpus {
	if x != nil {
		return x.Corpus
	}
	return nil
}

func (x *ReadCorpusResponse_CorpusInfo) GetCorpusStatus() *status.Status {
	if x != nil {
		return x.CorpusStatus
	}
	return nil
}

func (x *ReadCorpusResponse_CorpusInfo) GetSize() *CorpusSize {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *ReadCorpusResponse_CorpusInfo) GetSizeStatus() *status.Status {
	if x != nil {
		return x.SizeStatus
	}
	return nil
}

func (x *ReadCorpusResponse_CorpusInfo) GetApiKey() []*ApiKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *ReadCorpusResponse_CorpusInfo) GetApiKeyStatus() *status.Status {
	if x != nil {
		return x.ApiKeyStatus
	}
	return nil
}

func (x *ReadCorpusResponse_CorpusInfo) GetCustomDimension() []*Dimension {
	if x != nil {
		return x.CustomDimension
	}
	return nil
}

func (x *ReadCorpusResponse_CorpusInfo) GetCustomDimensionStatus() *status.Status {
	if x != nil {
		return x.CustomDimensionStatus
	}
	return nil
}

func (x *ReadCorpusResponse_CorpusInfo) GetFilterAttribute() []*FilterAttribute {
	if x != nil {
		return x.FilterAttribute
	}
	return nil
}

func (x *ReadCorpusResponse_CorpusInfo) GetFilterAttributeStatus() *status.Status {
	if x != nil {
		return x.FilterAttributeStatus
	}
	return nil
}

var File_admin_proto protoreflect.FileDescriptor

var file_admin_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63,
	0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x72, 0x70, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x71, 0x65, 0x6e,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x51, 0x65, 0x6e,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x65, 0x6e, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x49, 0x65, 0x6e, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x78,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4f, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x48, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x70,
	0x75, 0x73, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x70,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x72, 0x70, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x09, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0c, 0x92, 0x41, 0x09, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x08,
	0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x49, 0x64, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a, 0x18, 0xd2,
	0x01, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x08, 0x63,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x49, 0x64, 0x32, 0x11, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x72, 0x70,
	0x75, 0x73, 0x49, 0x64, 0x22, 0x3a, 0x20, 0x31, 0x20, 0x7d, 0x22, 0x43, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x92, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x70, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x69,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73,
	0x49, 0x64, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a, 0x18, 0xd2, 0x01, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x49,
	0x64, 0x32, 0x11, 0x7b, 0x20, 0x22, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x49, 0x64, 0x22, 0x3a,
	0x20, 0x31, 0x20, 0x7d, 0x22, 0x42, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x72,
	0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x4a, 0x12, 0x22, 0x5b, 0x54, 0x74, 0x5d, 0x5b, 0x45, 0x65, 0x5d, 0x5b,
	0x53, 0x73, 0x5d, 0x5b, 0x54, 0x74, 0x5d, 0x22, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0x92, 0x41, 0x09, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xf0, 0x3f, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a,
	0x0d, 0xd2, 0x01, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x32, 0x32,
	0x7b, 0x20, 0x22, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x3a, 0x20,
	0x31, 0x30, 0x2c, 0x20, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x5b,
	0x54, 0x74, 0x5d, 0x5b, 0x45, 0x65, 0x5d, 0x5b, 0x53, 0x73, 0x5d, 0x5b, 0x54, 0x74, 0x5d, 0x22,
	0x20, 0x7d, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x6f,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f,
	0x72, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x70, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70,
	0x75, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3f, 0x0a, 0x0a, 0x43,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x8a, 0x02, 0x0a,
	0x11, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x72, 0x65, 0x61, 0x64, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xed, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xeb, 0x05, 0x0a, 0x12, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x1a, 0x88, 0x05, 0x0a,
	0x0a, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x63,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63,
	0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x72,
	0x70, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x72, 0x70,
	0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xea, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61,
	0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x17,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61,
	0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x17, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x49, 0x64,
	0x22, 0x7b, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x75,
	0x73, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x01,
	0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x67, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61,
	0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x2a, 0xba, 0x02, 0x0a, 0x13, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f, 0x52, 0x45,
	0x41, 0x4c, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x19, 0x12, 0x24, 0x0a, 0x20, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x1e, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x45, 0x41, 0x4e, 0x10, 0x23, 0x2a, 0x8e, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25,
	0x0a, 0x21, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x10, 0x0a, 0x42, 0x40, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x0b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x1e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_proto_rawDescOnce sync.Once
	file_admin_proto_rawDescData = file_admin_proto_rawDesc
)

func file_admin_proto_rawDescGZIP() []byte {
	file_admin_proto_rawDescOnce.Do(func() {
		file_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_proto_rawDescData)
	})
	return file_admin_proto_rawDescData
}

var file_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_admin_proto_goTypes = []interface{}{
	(FilterAttributeType)(0),                 // 0: com.vectara.admin.FilterAttributeType
	(FilterAttributeLevel)(0),                // 1: com.vectara.admin.FilterAttributeLevel
	(*Corpus)(nil),                           // 2: com.vectara.admin.Corpus
	(*Dimension)(nil),                        // 3: com.vectara.admin.Dimension
	(*FilterAttribute)(nil),                  // 4: com.vectara.admin.FilterAttribute
	(*CreateCorpusRequest)(nil),              // 5: com.vectara.admin.CreateCorpusRequest
	(*CreateCorpusResponse)(nil),             // 6: com.vectara.admin.CreateCorpusResponse
	(*DeleteCorpusRequest)(nil),              // 7: com.vectara.admin.DeleteCorpusRequest
	(*DeleteCorpusResponse)(nil),             // 8: com.vectara.admin.DeleteCorpusResponse
	(*ResetCorpusRequest)(nil),               // 9: com.vectara.admin.ResetCorpusRequest
	(*ResetCorpusResponse)(nil),              // 10: com.vectara.admin.ResetCorpusResponse
	(*ListCorporaRequest)(nil),               // 11: com.vectara.admin.ListCorporaRequest
	(*ListCorporaResponse)(nil),              // 12: com.vectara.admin.ListCorporaResponse
	(*UpdateCorpusEnablementRequest)(nil),    // 13: com.vectara.admin.UpdateCorpusEnablementRequest
	(*UpdateCorpusEnablementResponse)(nil),   // 14: com.vectara.admin.UpdateCorpusEnablementResponse
	(*CorpusSize)(nil),                       // 15: com.vectara.admin.CorpusSize
	(*ReadCorpusRequest)(nil),                // 16: com.vectara.admin.ReadCorpusRequest
	(*ReadCorpusResponse)(nil),               // 17: com.vectara.admin.ReadCorpusResponse
	(*ComputeCorpusSizeRequest)(nil),         // 18: com.vectara.admin.ComputeCorpusSizeRequest
	(*ComputeCorpusSizeResponse)(nil),        // 19: com.vectara.admin.ComputeCorpusSizeResponse
	(*ReplaceCorpusFilterAttrsRequest)(nil),  // 20: com.vectara.admin.ReplaceCorpusFilterAttrsRequest
	(*ReplaceCorpusFilterAttrsResponse)(nil), // 21: com.vectara.admin.ReplaceCorpusFilterAttrsResponse
	(*ReadCorpusResponse_CorpusInfo)(nil),    // 22: com.vectara.admin.ReadCorpusResponse.CorpusInfo
	(*status.Status)(nil),                    // 23: com.vectara.Status
	(*ApiKey)(nil),                           // 24: com.vectara.admin.ApiKey
}
var file_admin_proto_depIdxs = []int32{
	3,  // 0: com.vectara.admin.Corpus.custom_dimensions:type_name -> com.vectara.admin.Dimension
	4,  // 1: com.vectara.admin.Corpus.filter_attributes:type_name -> com.vectara.admin.FilterAttribute
	0,  // 2: com.vectara.admin.FilterAttribute.type:type_name -> com.vectara.admin.FilterAttributeType
	1,  // 3: com.vectara.admin.FilterAttribute.level:type_name -> com.vectara.admin.FilterAttributeLevel
	2,  // 4: com.vectara.admin.CreateCorpusRequest.corpus:type_name -> com.vectara.admin.Corpus
	23, // 5: com.vectara.admin.CreateCorpusResponse.status:type_name -> com.vectara.Status
	23, // 6: com.vectara.admin.DeleteCorpusResponse.status:type_name -> com.vectara.Status
	23, // 7: com.vectara.admin.ResetCorpusResponse.status:type_name -> com.vectara.Status
	2,  // 8: com.vectara.admin.ListCorporaResponse.corpus:type_name -> com.vectara.admin.Corpus
	23, // 9: com.vectara.admin.ListCorporaResponse.status:type_name -> com.vectara.Status
	23, // 10: com.vectara.admin.UpdateCorpusEnablementResponse.status:type_name -> com.vectara.Status
	22, // 11: com.vectara.admin.ReadCorpusResponse.corpora:type_name -> com.vectara.admin.ReadCorpusResponse.CorpusInfo
	15, // 12: com.vectara.admin.ComputeCorpusSizeResponse.size:type_name -> com.vectara.admin.CorpusSize
	23, // 13: com.vectara.admin.ComputeCorpusSizeResponse.status:type_name -> com.vectara.Status
	4,  // 14: com.vectara.admin.ReplaceCorpusFilterAttrsRequest.filter_attributes:type_name -> com.vectara.admin.FilterAttribute
	23, // 15: com.vectara.admin.ReplaceCorpusFilterAttrsResponse.status:type_name -> com.vectara.Status
	2,  // 16: com.vectara.admin.ReadCorpusResponse.CorpusInfo.corpus:type_name -> com.vectara.admin.Corpus
	23, // 17: com.vectara.admin.ReadCorpusResponse.CorpusInfo.corpus_status:type_name -> com.vectara.Status
	15, // 18: com.vectara.admin.ReadCorpusResponse.CorpusInfo.size:type_name -> com.vectara.admin.CorpusSize
	23, // 19: com.vectara.admin.ReadCorpusResponse.CorpusInfo.size_status:type_name -> com.vectara.Status
	24, // 20: com.vectara.admin.ReadCorpusResponse.CorpusInfo.api_key:type_name -> com.vectara.admin.ApiKey
	23, // 21: com.vectara.admin.ReadCorpusResponse.CorpusInfo.api_key_status:type_name -> com.vectara.Status
	3,  // 22: com.vectara.admin.ReadCorpusResponse.CorpusInfo.custom_dimension:type_name -> com.vectara.admin.Dimension
	23, // 23: com.vectara.admin.ReadCorpusResponse.CorpusInfo.custom_dimension_status:type_name -> com.vectara.Status
	4,  // 24: com.vectara.admin.ReadCorpusResponse.CorpusInfo.filter_attribute:type_name -> com.vectara.admin.FilterAttribute
	23, // 25: com.vectara.admin.ReadCorpusResponse.CorpusInfo.filter_attribute_status:type_name -> com.vectara.Status
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_admin_proto_init() }
func file_admin_proto_init() {
	if File_admin_proto != nil {
		return
	}
	file_admin_apikey_proto_init()
	file_admin_metric_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Corpus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCorpusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCorpusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCorpusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCorpusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCorpusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetCorpusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCorporaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCorporaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCorpusEnablementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCorpusEnablementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorpusSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCorpusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCorpusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeCorpusSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeCorpusSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceCorpusFilterAttrsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceCorpusFilterAttrsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCorpusResponse_CorpusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_admin_proto_goTypes,
		DependencyIndexes: file_admin_proto_depIdxs,
		EnumInfos:         file_admin_proto_enumTypes,
		MessageInfos:      file_admin_proto_msgTypes,
	}.Build()
	File_admin_proto = out.File
	file_admin_proto_rawDesc = nil
	file_admin_proto_goTypes = nil
	file_admin_proto_depIdxs = nil
}
