// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.8.0
// source: serving.proto

package serving

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	status "vectara.com/public/proto/status"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Semantics controls the interpretation of the query string by the
// server, and can be used to override the default semantics assigned
// in the corpus definition.
type CorpusKey_Semantics int32

const (
	// Use corpus-assigned semantics.  This is the most common setting.
	CorpusKey_DEFAULT CorpusKey_Semantics = 0
	// Use query semantics.  This is also common.
	CorpusKey_QUERY CorpusKey_Semantics = 1
	// Use response semantics.  Usage of this is rare.
	CorpusKey_RESPONSE CorpusKey_Semantics = 2
)

// Enum value maps for CorpusKey_Semantics.
var (
	CorpusKey_Semantics_name = map[int32]string{
		0: "DEFAULT",
		1: "QUERY",
		2: "RESPONSE",
	}
	CorpusKey_Semantics_value = map[string]int32{
		"DEFAULT":  0,
		"QUERY":    1,
		"RESPONSE": 2,
	}
)

func (x CorpusKey_Semantics) Enum() *CorpusKey_Semantics {
	p := new(CorpusKey_Semantics)
	*p = x
	return p
}

func (x CorpusKey_Semantics) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CorpusKey_Semantics) Descriptor() protoreflect.EnumDescriptor {
	return file_serving_proto_enumTypes[0].Descriptor()
}

func (CorpusKey_Semantics) Type() protoreflect.EnumType {
	return &file_serving_proto_enumTypes[0]
}

func (x CorpusKey_Semantics) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CorpusKey_Semantics.Descriptor instead.
func (CorpusKey_Semantics) EnumDescriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{2, 0}
}

// Defined the weight of a custom dimension at query time.
type CustomDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Weight float64 `protobuf:"fixed64,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *CustomDimension) Reset() {
	*x = CustomDimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDimension) ProtoMessage() {}

func (x *CustomDimension) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDimension.ProtoReflect.Descriptor instead.
func (*CustomDimension) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{0}
}

func (x *CustomDimension) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomDimension) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// Configuration for a linear interpolation.
type LinearInterpolation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controls the weight given to lexical matches. The final score, S, is then:
	//     S = (lambda) * (lexical score) + (1 - lambda) * (dense score)
	Lambda float32 `protobuf:"fixed32,1,opt,name=lambda,proto3" json:"lambda,omitempty"`
}

func (x *LinearInterpolation) Reset() {
	*x = LinearInterpolation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearInterpolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearInterpolation) ProtoMessage() {}

func (x *LinearInterpolation) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearInterpolation.ProtoReflect.Descriptor instead.
func (*LinearInterpolation) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{1}
}

func (x *LinearInterpolation) GetLambda() float32 {
	if x != nil {
		return x.Lambda
	}
	return 0
}

type CorpusKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Customer ID.
	CustomerId uint32 `protobuf:"varint,5,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// The Corpus ID.
	CorpusId  uint32              `protobuf:"varint,10,opt,name=corpus_id,json=corpusId,proto3" json:"corpus_id,omitempty"`
	Semantics CorpusKey_Semantics `protobuf:"varint,15,opt,name=semantics,proto3,enum=com.vectara.serving.CorpusKey_Semantics" json:"semantics,omitempty"`
	// Weights on custom dimensions for the corpus.
	Dim                        []*CustomDimension   `protobuf:"bytes,20,rep,name=dim,proto3" json:"dim,omitempty"`
	MetadataFilter             string               `protobuf:"bytes,25,opt,name=metadata_filter,json=metadataFilter,proto3" json:"metadata_filter,omitempty"`
	LexicalInterpolationConfig *LinearInterpolation `protobuf:"bytes,30,opt,name=lexical_interpolation_config,json=lexicalInterpolationConfig,proto3" json:"lexical_interpolation_config,omitempty"`
}

func (x *CorpusKey) Reset() {
	*x = CorpusKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorpusKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorpusKey) ProtoMessage() {}

func (x *CorpusKey) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorpusKey.ProtoReflect.Descriptor instead.
func (*CorpusKey) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{2}
}

func (x *CorpusKey) GetCustomerId() uint32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CorpusKey) GetCorpusId() uint32 {
	if x != nil {
		return x.CorpusId
	}
	return 0
}

func (x *CorpusKey) GetSemantics() CorpusKey_Semantics {
	if x != nil {
		return x.Semantics
	}
	return CorpusKey_DEFAULT
}

func (x *CorpusKey) GetDim() []*CustomDimension {
	if x != nil {
		return x.Dim
	}
	return nil
}

func (x *CorpusKey) GetMetadataFilter() string {
	if x != nil {
		return x.MetadataFilter
	}
	return ""
}

func (x *CorpusKey) GetLexicalInterpolationConfig() *LinearInterpolation {
	if x != nil {
		return x.LexicalInterpolationConfig
	}
	return nil
}

type SummarizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the summarizer+prompt combination to use for summarization.
	SummarizerPromptName string `protobuf:"bytes,3,opt,name=summarizer_prompt_name,json=summarizerPromptName,proto3" json:"summarizer_prompt_name,omitempty"`
	// Maximum number of results to summarize.
	MaxSummarizedResults uint32 `protobuf:"varint,15,opt,name=max_summarized_results,json=maxSummarizedResults,proto3" json:"max_summarized_results,omitempty"`
	// ISO 639-1 or ISO 639-3 language code for the response, or "auto" to indicate that
	// the auto-detected language of the incoming query should be used.
	ResponseLang string `protobuf:"bytes,20,opt,name=response_lang,json=responseLang,proto3" json:"response_lang,omitempty"`
}

func (x *SummarizationRequest) Reset() {
	*x = SummarizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizationRequest) ProtoMessage() {}

func (x *SummarizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizationRequest.ProtoReflect.Descriptor instead.
func (*SummarizationRequest) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{3}
}

func (x *SummarizationRequest) GetSummarizerPromptName() string {
	if x != nil {
		return x.SummarizerPromptName
	}
	return ""
}

func (x *SummarizationRequest) GetMaxSummarizedResults() uint32 {
	if x != nil {
		return x.MaxSummarizedResults
	}
	return 0
}

func (x *SummarizationRequest) GetResponseLang() string {
	if x != nil {
		return x.ResponseLang
	}
	return ""
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query text to use from the end user.
	Query string `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	// The start position in the result set
	Start uint32 `protobuf:"varint,15,opt,name=start,proto3" json:"start,omitempty"`
	// The number of results to return.
	NumResults    uint32                      `protobuf:"varint,20,opt,name=num_results,json=numResults,proto3" json:"num_results,omitempty"`
	ContextConfig *QueryRequest_ContextConfig `protobuf:"bytes,22,opt,name=context_config,json=contextConfig,proto3" json:"context_config,omitempty"`
	// The query is run on all these corpora, and the results are
	// merged together in the response, ranked by score.
	CorpusKey       []*CorpusKey                  `protobuf:"bytes,25,rep,name=corpus_key,json=corpusKey,proto3" json:"corpus_key,omitempty"`
	RerankingConfig *QueryRequest_RerankingConfig `protobuf:"bytes,30,opt,name=reranking_config,json=rerankingConfig,proto3" json:"reranking_config,omitempty"`
	// Optionally, one or more requests to summarize the results.
	Summary []*SummarizationRequest `protobuf:"bytes,35,rep,name=summary,proto3" json:"summary,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{4}
}

func (x *QueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryRequest) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *QueryRequest) GetNumResults() uint32 {
	if x != nil {
		return x.NumResults
	}
	return 0
}

func (x *QueryRequest) GetContextConfig() *QueryRequest_ContextConfig {
	if x != nil {
		return x.ContextConfig
	}
	return nil
}

func (x *QueryRequest) GetCorpusKey() []*CorpusKey {
	if x != nil {
		return x.CorpusKey
	}
	return nil
}

func (x *QueryRequest) GetRerankingConfig() *QueryRequest_RerankingConfig {
	if x != nil {
		return x.RerankingConfig
	}
	return nil
}

func (x *QueryRequest) GetSummary() []*SummarizationRequest {
	if x != nil {
		return x.Summary
	}
	return nil
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{5}
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The summary text.
	Text string `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	// ISO 639 language code of the summary. If the requested language was set to "AUTO", the
	// summary language is the same as the auto-detected language of the query.
	Lang string `protobuf:"bytes,15,opt,name=lang,proto3" json:"lang,omitempty"`
	// Statuses are marked “repeated” for consistency and flexibility. A failed
	// summary should bubble up into the status code of the entire ResponseSet.
	Status []*status.Status `protobuf:"bytes,1000,rep,name=status,proto3" json:"status,omitempty"`
	// Populated for streaming requests only.
	FutureId int32 `protobuf:"varint,1010,opt,name=future_id,json=futureId,proto3" json:"future_id,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{6}
}

func (x *Summary) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Summary) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Summary) GetStatus() []*status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Summary) GetFutureId() int32 {
	if x != nil {
		return x.FutureId
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// The score used for ranking results.  The higher the score, the better the match.
	Score    float32      `protobuf:"fixed32,10,opt,name=score,proto3" json:"score,omitempty"`
	Metadata []*Attribute `protobuf:"bytes,20,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// Use this ID to find the document in the ResponseSet.
	DocumentIndex uint32     `protobuf:"varint,25,opt,name=document_index,json=documentIndex,proto3" json:"document_index,omitempty"`
	CorpusKey     *CorpusKey `protobuf:"bytes,30,opt,name=corpus_key,json=corpusKey,proto3" json:"corpus_key,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{7}
}

func (x *Response) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Response) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Response) GetMetadata() []*Attribute {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Response) GetDocumentIndex() uint32 {
	if x != nil {
		return x.DocumentIndex
	}
	return 0
}

func (x *Response) GetCorpusKey() *CorpusKey {
	if x != nil {
		return x.CorpusKey
	}
	return nil
}

type ResponseSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*Response `protobuf:"bytes,5,rep,name=response,proto3" json:"response,omitempty"`
	// Potentially multiple warnings.
	Status   []*status.Status        `protobuf:"bytes,10,rep,name=status,proto3" json:"status,omitempty"`
	Document []*ResponseSet_Document `protobuf:"bytes,15,rep,name=document,proto3" json:"document,omitempty"`
	// A summary. If using synchronous APIs for querying, the summary will be
	// included directly in this response. However, if using the streaming APIs
	// for query, the summary messages only set the future_id field. Later, as
	// summary results are computed and returned over the stream, the future_id
	// within the summary can be used for correlation.
	Summary []*Summary `protobuf:"bytes,25,rep,name=summary,proto3" json:"summary,omitempty"`
	// Populated for streaming requests only.
	FutureId int32 `protobuf:"varint,1010,opt,name=future_id,json=futureId,proto3" json:"future_id,omitempty"`
}

func (x *ResponseSet) Reset() {
	*x = ResponseSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSet) ProtoMessage() {}

func (x *ResponseSet) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSet.ProtoReflect.Descriptor instead.
func (*ResponseSet) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseSet) GetResponse() []*Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ResponseSet) GetStatus() []*status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ResponseSet) GetDocument() []*ResponseSet_Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ResponseSet) GetSummary() []*Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ResponseSet) GetFutureId() int32 {
	if x != nil {
		return x.FutureId
	}
	return 0
}

type BatchQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query []*QueryRequest `protobuf:"bytes,5,rep,name=query,proto3" json:"query,omitempty"`
}

func (x *BatchQueryRequest) Reset() {
	*x = BatchQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryRequest) ProtoMessage() {}

func (x *BatchQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryRequest.ProtoReflect.Descriptor instead.
func (*BatchQueryRequest) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{9}
}

func (x *BatchQueryRequest) GetQuery() []*QueryRequest {
	if x != nil {
		return x.Query
	}
	return nil
}

type BatchQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response sets for queries within the batch. If using synchronous APIs
	// for querying, the response set will be included directly in the response.
	// However, if using the streaming APIs for query, the response set messages
	// only set the future_id field. Later, as response sets are computed and
	// returned over the stream, the future_id within the summary can be used for
	// correlation.
	ResponseSet []*ResponseSet      `protobuf:"bytes,5,rep,name=response_set,json=responseSet,proto3" json:"response_set,omitempty"`
	Status      []*status.Status    `protobuf:"bytes,1000,rep,name=status,proto3" json:"status,omitempty"`
	Metrics     *PerformanceMetrics `protobuf:"bytes,1005,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *BatchQueryResponse) Reset() {
	*x = BatchQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryResponse) ProtoMessage() {}

func (x *BatchQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryResponse) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{10}
}

func (x *BatchQueryResponse) GetResponseSet() []*ResponseSet {
	if x != nil {
		return x.ResponseSet
	}
	return nil
}

func (x *BatchQueryResponse) GetStatus() []*status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchQueryResponse) GetMetrics() *PerformanceMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// This message contains individual partial results that are returned
// asynchronously by the streaming interface.
type QueryResponsePart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The top-level query response. This is sent exactly once over the stream.
	BatchQueryResponse *BatchQueryResponse `protobuf:"bytes,5,opt,name=batch_query_response,json=batchQueryResponse,proto3" json:"batch_query_response,omitempty"`
	// A response set. Use the future_id for correlation. One of these is sent
	// for every query in the batch.
	ResponseSet *ResponseSet `protobuf:"bytes,10,opt,name=response_set,json=responseSet,proto3" json:"response_set,omitempty"`
	// A summary set. Use the future_id for correlation. One of these is sent
	// for every summary that's requested.
	Summary *Summary `protobuf:"bytes,15,opt,name=summary,proto3" json:"summary,omitempty"`
	// A status code at the level of a BatchQueryResponse.
	Status []*status.Status `protobuf:"bytes,1000,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *QueryResponsePart) Reset() {
	*x = QueryResponsePart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponsePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponsePart) ProtoMessage() {}

func (x *QueryResponsePart) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponsePart.ProtoReflect.Descriptor instead.
func (*QueryResponsePart) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{11}
}

func (x *QueryResponsePart) GetBatchQueryResponse() *BatchQueryResponse {
	if x != nil {
		return x.BatchQueryResponse
	}
	return nil
}

func (x *QueryResponsePart) GetResponseSet() *ResponseSet {
	if x != nil {
		return x.ResponseSet
	}
	return nil
}

func (x *QueryResponsePart) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *QueryResponsePart) GetStatus() []*status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Basic performance metrics that can be attached to a server response.
type PerformanceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How long it took to encode the query.
	QueryEncodeMs uint32 `protobuf:"varint,5,opt,name=query_encode_ms,json=queryEncodeMs,proto3" json:"query_encode_ms,omitempty"`
	// How long it took to retrieve relevant results.
	RetrievalMs uint32 `protobuf:"varint,10,opt,name=retrieval_ms,json=retrievalMs,proto3" json:"retrieval_ms,omitempty"`
	// How long it took to retrieve user data.
	UserdataRetrievalMs uint32 `protobuf:"varint,15,opt,name=userdata_retrieval_ms,json=userdataRetrievalMs,proto3" json:"userdata_retrieval_ms,omitempty"`
	// How long it took to rerank the results.
	RerankMs uint32 `protobuf:"varint,20,opt,name=rerank_ms,json=rerankMs,proto3" json:"rerank_ms,omitempty"`
}

func (x *PerformanceMetrics) Reset() {
	*x = PerformanceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetrics) ProtoMessage() {}

func (x *PerformanceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetrics.ProtoReflect.Descriptor instead.
func (*PerformanceMetrics) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{12}
}

func (x *PerformanceMetrics) GetQueryEncodeMs() uint32 {
	if x != nil {
		return x.QueryEncodeMs
	}
	return 0
}

func (x *PerformanceMetrics) GetRetrievalMs() uint32 {
	if x != nil {
		return x.RetrievalMs
	}
	return 0
}

func (x *PerformanceMetrics) GetUserdataRetrievalMs() uint32 {
	if x != nil {
		return x.UserdataRetrievalMs
	}
	return 0
}

func (x *PerformanceMetrics) GetRerankMs() uint32 {
	if x != nil {
		return x.RerankMs
	}
	return 0
}

//Configuration for the maximum marginal relevance (MMR) reranker.
type MMRConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Intuitively, this bias controls how much the reranker should favor
	// diversity over relevance. A bias of 1 means that relevance is not
	// considered at all, while a bias of 0 means that diversity is not
	// considered. A score of 0.8 means that diversity counts for 80% of the
	// score, and relevance for 20%.
	//
	// The bias is defined as (1 - lambda), where lambda is defined as in
	// the original paper, "The Use of MMR, Diversity-Based Reranking for
	// Reordering Documents and Producing Summaries" by Carbonell and Goldstein,
	// 1998.
	DiversityBias float32 `protobuf:"fixed32,5,opt,name=diversity_bias,json=diversityBias,proto3" json:"diversity_bias,omitempty"`
}

func (x *MMRConfig) Reset() {
	*x = MMRConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MMRConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MMRConfig) ProtoMessage() {}

func (x *MMRConfig) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MMRConfig.ProtoReflect.Descriptor instead.
func (*MMRConfig) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{13}
}

func (x *MMRConfig) GetDiversityBias() float32 {
	if x != nil {
		return x.DiversityBias
	}
	return 0
}

type QueryRequest_ContextConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// chars_before is used for showing the end user the characters leading up
	// to the result snippet.  This can help the end-user understand the
	// context of that result. Ignored if sentences_before is set.
	CharsBefore int32 `protobuf:"varint,5,opt,name=chars_before,json=charsBefore,proto3" json:"chars_before,omitempty"`
	// chars_after is used for showing the end user the characters after the
	// result snippet.  This can help the end-user understand the context of
	// that result. Ignored if sentences_before is set.
	CharsAfter int32 `protobuf:"varint,10,opt,name=chars_after,json=charsAfter,proto3" json:"chars_after,omitempty"`
	// sentences_before is used for showing the end user the sentences leading
	// up to the result snippet.  This can help the end-user understand the
	// context of that result.
	SentencesBefore int32 `protobuf:"varint,15,opt,name=sentences_before,json=sentencesBefore,proto3" json:"sentences_before,omitempty"`
	// sentences_after is used for showing the end user the sentences leading
	// up to the result snippet.  This can help the end-user understand the
	// context of that result.
	SentencesAfter int32 `protobuf:"varint,20,opt,name=sentences_after,json=sentencesAfter,proto3" json:"sentences_after,omitempty"`
	// The tag that wraps the snippet at the start. Often this is used to
	// provide a start HTML/XML tag or some other delimiter you can use in an
	// application to understand where to provide highlighting in your UI and
	// understand where the context before ends and the snippet begins.
	StartTag string `protobuf:"bytes,25,opt,name=start_tag,json=startTag,proto3" json:"start_tag,omitempty"`
	// The tag that wraps the snippet at the end. Often this is used to provide
	// a start HTML/XML tag or some other delimiter you can use in an
	// application to understand where to provide highlighting in your UI and
	// understand where the snippet ends and the context after begins.
	EndTag string `protobuf:"bytes,30,opt,name=end_tag,json=endTag,proto3" json:"end_tag,omitempty"`
}

func (x *QueryRequest_ContextConfig) Reset() {
	*x = QueryRequest_ContextConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest_ContextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest_ContextConfig) ProtoMessage() {}

func (x *QueryRequest_ContextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest_ContextConfig.ProtoReflect.Descriptor instead.
func (*QueryRequest_ContextConfig) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{4, 0}
}

func (x *QueryRequest_ContextConfig) GetCharsBefore() int32 {
	if x != nil {
		return x.CharsBefore
	}
	return 0
}

func (x *QueryRequest_ContextConfig) GetCharsAfter() int32 {
	if x != nil {
		return x.CharsAfter
	}
	return 0
}

func (x *QueryRequest_ContextConfig) GetSentencesBefore() int32 {
	if x != nil {
		return x.SentencesBefore
	}
	return 0
}

func (x *QueryRequest_ContextConfig) GetSentencesAfter() int32 {
	if x != nil {
		return x.SentencesAfter
	}
	return 0
}

func (x *QueryRequest_ContextConfig) GetStartTag() string {
	if x != nil {
		return x.StartTag
	}
	return ""
}

func (x *QueryRequest_ContextConfig) GetEndTag() string {
	if x != nil {
		return x.EndTag
	}
	return ""
}

// Configuration options to apply to the reranking.
type QueryRequest_RerankingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which reranking model to use if reranking.  Currently, the only IDs
	// available are:
	// - 272725717, HuggingFace Open Source x-attentional reranker
	// - 272725718, Maximum Marginal Relevance Reranker
	RerankerId uint32 `protobuf:"varint,5,opt,name=reranker_id,json=rerankerId,proto3" json:"reranker_id,omitempty"`
	// Reranker-specific parameters.  The numbering starts from 100, and moves
	// upwards in increments of 5.
	MmrConfig *MMRConfig `protobuf:"bytes,100,opt,name=mmr_config,json=mmrConfig,proto3" json:"mmr_config,omitempty"`
}

func (x *QueryRequest_RerankingConfig) Reset() {
	*x = QueryRequest_RerankingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest_RerankingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest_RerankingConfig) ProtoMessage() {}

func (x *QueryRequest_RerankingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest_RerankingConfig.ProtoReflect.Descriptor instead.
func (*QueryRequest_RerankingConfig) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{4, 1}
}

func (x *QueryRequest_RerankingConfig) GetRerankerId() uint32 {
	if x != nil {
		return x.RerankerId
	}
	return 0
}

func (x *QueryRequest_RerankingConfig) GetMmrConfig() *MMRConfig {
	if x != nil {
		return x.MmrConfig
	}
	return nil
}

type ResponseSet_Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string       `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Metadata []*Attribute `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ResponseSet_Document) Reset() {
	*x = ResponseSet_Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serving_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSet_Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSet_Document) ProtoMessage() {}

func (x *ResponseSet_Document) ProtoReflect() protoreflect.Message {
	mi := &file_serving_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSet_Document.ProtoReflect.Descriptor instead.
func (*ResponseSet_Document) Descriptor() ([]byte, []int) {
	return file_serving_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ResponseSet_Document) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResponseSet_Document) GetMetadata() []*Attribute {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_serving_proto protoreflect.FileDescriptor

var file_serving_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x2d, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x22, 0x91, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x2e,
	0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x0f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x1c, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x31, 0x0a, 0x09, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x02, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x22, 0xa3,
	0x06, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61,
	0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x10, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0f, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x23, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x98, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0x92, 0x41, 0x04, 0x4a, 0x02, 0x33, 0x30, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x73, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x73, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02,
	0x33, 0x30, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x10, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x33,
	0x52, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0x92, 0x41, 0x03, 0x4a,
	0x01, 0x33, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x3c, 0x62, 0x3e,
	0x22, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41,
	0x08, 0x4a, 0x06, 0x22, 0x3c, 0x2f, 0x62, 0x3e, 0x22, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x54, 0x61,
	0x67, 0x1a, 0x71, 0x0a, 0x0f, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x6d, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x4d, 0x52, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6d, 0x6d, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x35, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x07, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x2c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x72, 0x70, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x70, 0x75, 0x73,
	0x4b, 0x65, 0x79, 0x22, 0xea, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x1a, 0x56, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63,
	0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4c, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61,
	0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xcb,
	0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x99, 0x02, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x61, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x12, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x5f, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x73, 0x22, 0x78, 0x0a, 0x09, 0x4d,
	0x4d, 0x52, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x44, 0x92, 0x41, 0x41, 0x32, 0x3a, 0x54, 0x68, 0x65, 0x20, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x20, 0x62, 0x69, 0x61, 0x73, 0x2e, 0x20, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	0x2e, 0x4a, 0x03, 0x30, 0x2e, 0x33, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x42, 0x69, 0x61, 0x73, 0x42, 0x46, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x63,
	0x74, 0x61, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x42, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x20, 0x76, 0x65, 0x63,
	0x74, 0x61, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_serving_proto_rawDescOnce sync.Once
	file_serving_proto_rawDescData = file_serving_proto_rawDesc
)

func file_serving_proto_rawDescGZIP() []byte {
	file_serving_proto_rawDescOnce.Do(func() {
		file_serving_proto_rawDescData = protoimpl.X.CompressGZIP(file_serving_proto_rawDescData)
	})
	return file_serving_proto_rawDescData
}

var file_serving_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_serving_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_serving_proto_goTypes = []interface{}{
	(CorpusKey_Semantics)(0),             // 0: com.vectara.serving.CorpusKey.Semantics
	(*CustomDimension)(nil),              // 1: com.vectara.serving.CustomDimension
	(*LinearInterpolation)(nil),          // 2: com.vectara.serving.LinearInterpolation
	(*CorpusKey)(nil),                    // 3: com.vectara.serving.CorpusKey
	(*SummarizationRequest)(nil),         // 4: com.vectara.serving.SummarizationRequest
	(*QueryRequest)(nil),                 // 5: com.vectara.serving.QueryRequest
	(*Attribute)(nil),                    // 6: com.vectara.serving.Attribute
	(*Summary)(nil),                      // 7: com.vectara.serving.Summary
	(*Response)(nil),                     // 8: com.vectara.serving.Response
	(*ResponseSet)(nil),                  // 9: com.vectara.serving.ResponseSet
	(*BatchQueryRequest)(nil),            // 10: com.vectara.serving.BatchQueryRequest
	(*BatchQueryResponse)(nil),           // 11: com.vectara.serving.BatchQueryResponse
	(*QueryResponsePart)(nil),            // 12: com.vectara.serving.QueryResponsePart
	(*PerformanceMetrics)(nil),           // 13: com.vectara.serving.PerformanceMetrics
	(*MMRConfig)(nil),                    // 14: com.vectara.serving.MMRConfig
	(*QueryRequest_ContextConfig)(nil),   // 15: com.vectara.serving.QueryRequest.ContextConfig
	(*QueryRequest_RerankingConfig)(nil), // 16: com.vectara.serving.QueryRequest.RerankingConfig
	(*ResponseSet_Document)(nil),         // 17: com.vectara.serving.ResponseSet.Document
	(*status.Status)(nil),                // 18: com.vectara.Status
}
var file_serving_proto_depIdxs = []int32{
	0,  // 0: com.vectara.serving.CorpusKey.semantics:type_name -> com.vectara.serving.CorpusKey.Semantics
	1,  // 1: com.vectara.serving.CorpusKey.dim:type_name -> com.vectara.serving.CustomDimension
	2,  // 2: com.vectara.serving.CorpusKey.lexical_interpolation_config:type_name -> com.vectara.serving.LinearInterpolation
	15, // 3: com.vectara.serving.QueryRequest.context_config:type_name -> com.vectara.serving.QueryRequest.ContextConfig
	3,  // 4: com.vectara.serving.QueryRequest.corpus_key:type_name -> com.vectara.serving.CorpusKey
	16, // 5: com.vectara.serving.QueryRequest.reranking_config:type_name -> com.vectara.serving.QueryRequest.RerankingConfig
	4,  // 6: com.vectara.serving.QueryRequest.summary:type_name -> com.vectara.serving.SummarizationRequest
	18, // 7: com.vectara.serving.Summary.status:type_name -> com.vectara.Status
	6,  // 8: com.vectara.serving.Response.metadata:type_name -> com.vectara.serving.Attribute
	3,  // 9: com.vectara.serving.Response.corpus_key:type_name -> com.vectara.serving.CorpusKey
	8,  // 10: com.vectara.serving.ResponseSet.response:type_name -> com.vectara.serving.Response
	18, // 11: com.vectara.serving.ResponseSet.status:type_name -> com.vectara.Status
	17, // 12: com.vectara.serving.ResponseSet.document:type_name -> com.vectara.serving.ResponseSet.Document
	7,  // 13: com.vectara.serving.ResponseSet.summary:type_name -> com.vectara.serving.Summary
	5,  // 14: com.vectara.serving.BatchQueryRequest.query:type_name -> com.vectara.serving.QueryRequest
	9,  // 15: com.vectara.serving.BatchQueryResponse.response_set:type_name -> com.vectara.serving.ResponseSet
	18, // 16: com.vectara.serving.BatchQueryResponse.status:type_name -> com.vectara.Status
	13, // 17: com.vectara.serving.BatchQueryResponse.metrics:type_name -> com.vectara.serving.PerformanceMetrics
	11, // 18: com.vectara.serving.QueryResponsePart.batch_query_response:type_name -> com.vectara.serving.BatchQueryResponse
	9,  // 19: com.vectara.serving.QueryResponsePart.response_set:type_name -> com.vectara.serving.ResponseSet
	7,  // 20: com.vectara.serving.QueryResponsePart.summary:type_name -> com.vectara.serving.Summary
	18, // 21: com.vectara.serving.QueryResponsePart.status:type_name -> com.vectara.Status
	14, // 22: com.vectara.serving.QueryRequest.RerankingConfig.mmr_config:type_name -> com.vectara.serving.MMRConfig
	6,  // 23: com.vectara.serving.ResponseSet.Document.metadata:type_name -> com.vectara.serving.Attribute
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_serving_proto_init() }
func file_serving_proto_init() {
	if File_serving_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_serving_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearInterpolation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorpusKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummarizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponsePart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MMRConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest_ContextConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest_RerankingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serving_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSet_Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_serving_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_serving_proto_goTypes,
		DependencyIndexes: file_serving_proto_depIdxs,
		EnumInfos:         file_serving_proto_enumTypes,
		MessageInfos:      file_serving_proto_msgTypes,
	}.Build()
	File_serving_proto = out.File
	file_serving_proto_rawDesc = nil
	file_serving_proto_goTypes = nil
	file_serving_proto_depIdxs = nil
}
