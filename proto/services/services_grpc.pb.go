// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: services.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	admin "vectara.com/public/proto/admin"
	common "vectara.com/public/proto/common"
	lists "vectara.com/public/proto/lists"
	serving "vectara.com/public/proto/serving"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexServiceClient interface {
	Index(ctx context.Context, in *IndexDocumentRequest, opts ...grpc.CallOption) (*IndexDocumentResponse, error)
	Delete(ctx context.Context, in *common.DeleteDocumentRequest, opts ...grpc.CallOption) (*common.DeleteDocumentResponse, error)
}

type indexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexServiceClient(cc grpc.ClientConnInterface) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) Index(ctx context.Context, in *IndexDocumentRequest, opts ...grpc.CallOption) (*IndexDocumentResponse, error) {
	out := new(IndexDocumentResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.IndexService/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServiceClient) Delete(ctx context.Context, in *common.DeleteDocumentRequest, opts ...grpc.CallOption) (*common.DeleteDocumentResponse, error) {
	out := new(common.DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.IndexService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServiceServer is the server API for IndexService service.
// All implementations must embed UnimplementedIndexServiceServer
// for forward compatibility
type IndexServiceServer interface {
	Index(context.Context, *IndexDocumentRequest) (*IndexDocumentResponse, error)
	Delete(context.Context, *common.DeleteDocumentRequest) (*common.DeleteDocumentResponse, error)
	mustEmbedUnimplementedIndexServiceServer()
}

// UnimplementedIndexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndexServiceServer struct {
}

func (UnimplementedIndexServiceServer) Index(context.Context, *IndexDocumentRequest) (*IndexDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedIndexServiceServer) Delete(context.Context, *common.DeleteDocumentRequest) (*common.DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIndexServiceServer) mustEmbedUnimplementedIndexServiceServer() {}

// UnsafeIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexServiceServer will
// result in compilation errors.
type UnsafeIndexServiceServer interface {
	mustEmbedUnimplementedIndexServiceServer()
}

func RegisterIndexServiceServer(s grpc.ServiceRegistrar, srv IndexServiceServer) {
	s.RegisterService(&IndexService_ServiceDesc, srv)
}

func _IndexService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.IndexService/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Index(ctx, req.(*IndexDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.IndexService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Delete(ctx, req.(*common.DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexService_ServiceDesc is the grpc.ServiceDesc for IndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.vectara.IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _IndexService_Index_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IndexService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	// A standard single-request, single-response endpoint designed for high performance.
	Query(ctx context.Context, in *serving.BatchQueryRequest, opts ...grpc.CallOption) (*serving.BatchQueryResponse, error)
	// A streamed response interface when lower latency is absolutely critical.
	StreamQuery(ctx context.Context, in *serving.BatchQueryRequest, opts ...grpc.CallOption) (QueryService_StreamQueryClient, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Query(ctx context.Context, in *serving.BatchQueryRequest, opts ...grpc.CallOption) (*serving.BatchQueryResponse, error) {
	out := new(serving.BatchQueryResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.QueryService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StreamQuery(ctx context.Context, in *serving.BatchQueryRequest, opts ...grpc.CallOption) (QueryService_StreamQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[0], "/com.vectara.QueryService/StreamQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceStreamQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_StreamQueryClient interface {
	Recv() (*serving.QueryResponsePart, error)
	grpc.ClientStream
}

type queryServiceStreamQueryClient struct {
	grpc.ClientStream
}

func (x *queryServiceStreamQueryClient) Recv() (*serving.QueryResponsePart, error) {
	m := new(serving.QueryResponsePart)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	// A standard single-request, single-response endpoint designed for high performance.
	Query(context.Context, *serving.BatchQueryRequest) (*serving.BatchQueryResponse, error)
	// A streamed response interface when lower latency is absolutely critical.
	StreamQuery(*serving.BatchQueryRequest, QueryService_StreamQueryServer) error
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) Query(context.Context, *serving.BatchQueryRequest) (*serving.BatchQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedQueryServiceServer) StreamQuery(*serving.BatchQueryRequest, QueryService_StreamQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamQuery not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(serving.BatchQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.QueryService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Query(ctx, req.(*serving.BatchQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StreamQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(serving.BatchQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).StreamQuery(m, &queryServiceStreamQueryServer{stream})
}

type QueryService_StreamQueryServer interface {
	Send(*serving.QueryResponsePart) error
	grpc.ServerStream
}

type queryServiceStreamQueryServer struct {
	grpc.ServerStream
}

func (x *queryServiceStreamQueryServer) Send(m *serving.QueryResponsePart) error {
	return x.ServerStream.SendMsg(m)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.vectara.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _QueryService_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamQuery",
			Handler:       _QueryService_StreamQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services.proto",
}

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	CreateCorpus(ctx context.Context, in *admin.CreateCorpusRequest, opts ...grpc.CallOption) (*admin.CreateCorpusResponse, error)
	DeleteCorpus(ctx context.Context, in *admin.DeleteCorpusRequest, opts ...grpc.CallOption) (*admin.DeleteCorpusResponse, error)
	ResetCorpus(ctx context.Context, in *admin.ResetCorpusRequest, opts ...grpc.CallOption) (*admin.ResetCorpusResponse, error)
	ListCorpora(ctx context.Context, in *admin.ListCorporaRequest, opts ...grpc.CallOption) (*admin.ListCorporaResponse, error)
	ListJobs(ctx context.Context, in *admin.ListJobsRequest, opts ...grpc.CallOption) (*admin.ListJobsResponse, error)
	// Return information about corpora.
	ReadCorpus(ctx context.Context, in *admin.ReadCorpusRequest, opts ...grpc.CallOption) (*admin.ReadCorpusResponse, error)
	ComputeCorpusSize(ctx context.Context, in *admin.ComputeCorpusSizeRequest, opts ...grpc.CallOption) (*admin.ComputeCorpusSizeResponse, error)
	ComputeAccountSize(ctx context.Context, in *admin.ComputeAccountSizeRequest, opts ...grpc.CallOption) (*admin.ComputeAccountSizeResponse, error)
	ListUsers(ctx context.Context, in *admin.ListUsersRequest, opts ...grpc.CallOption) (*admin.ListUsersResponse, error)
	ManageUser(ctx context.Context, in *admin.ManageUserRequest, opts ...grpc.CallOption) (*admin.ManageUserResponse, error)
	UpdateCorpusEnablement(ctx context.Context, in *admin.UpdateCorpusEnablementRequest, opts ...grpc.CallOption) (*admin.UpdateCorpusEnablementResponse, error)
	ReplaceCorpusFilterAttrs(ctx context.Context, in *admin.ReplaceCorpusFilterAttrsRequest, opts ...grpc.CallOption) (*admin.ReplaceCorpusFilterAttrsResponse, error)
	// Get metric usage of either sliding windows or between two timestamps
	GetUsageMetrics(ctx context.Context, in *admin.UsageMetricsRequest, opts ...grpc.CallOption) (*admin.UsageMetricsResponse, error)
	CreateApiKey(ctx context.Context, in *admin.CreateApiKeyRequest, opts ...grpc.CallOption) (*admin.CreateApiKeyResponse, error)
	EnableApiKey(ctx context.Context, in *admin.EnableApiKeyRequest, opts ...grpc.CallOption) (*admin.EnableApiKeyResponse, error)
	DeleteApiKey(ctx context.Context, in *admin.DeleteApiKeyRequest, opts ...grpc.CallOption) (*admin.DeleteApiKeyResponse, error)
	ListApiKeys(ctx context.Context, in *admin.ListApiKeysRequest, opts ...grpc.CallOption) (*admin.ListApiKeysResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CreateCorpus(ctx context.Context, in *admin.CreateCorpusRequest, opts ...grpc.CallOption) (*admin.CreateCorpusResponse, error) {
	out := new(admin.CreateCorpusResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/CreateCorpus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteCorpus(ctx context.Context, in *admin.DeleteCorpusRequest, opts ...grpc.CallOption) (*admin.DeleteCorpusResponse, error) {
	out := new(admin.DeleteCorpusResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/DeleteCorpus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCorpus(ctx context.Context, in *admin.ResetCorpusRequest, opts ...grpc.CallOption) (*admin.ResetCorpusResponse, error) {
	out := new(admin.ResetCorpusResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ResetCorpus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListCorpora(ctx context.Context, in *admin.ListCorporaRequest, opts ...grpc.CallOption) (*admin.ListCorporaResponse, error) {
	out := new(admin.ListCorporaResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ListCorpora", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListJobs(ctx context.Context, in *admin.ListJobsRequest, opts ...grpc.CallOption) (*admin.ListJobsResponse, error) {
	out := new(admin.ListJobsResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ReadCorpus(ctx context.Context, in *admin.ReadCorpusRequest, opts ...grpc.CallOption) (*admin.ReadCorpusResponse, error) {
	out := new(admin.ReadCorpusResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ReadCorpus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ComputeCorpusSize(ctx context.Context, in *admin.ComputeCorpusSizeRequest, opts ...grpc.CallOption) (*admin.ComputeCorpusSizeResponse, error) {
	out := new(admin.ComputeCorpusSizeResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ComputeCorpusSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ComputeAccountSize(ctx context.Context, in *admin.ComputeAccountSizeRequest, opts ...grpc.CallOption) (*admin.ComputeAccountSizeResponse, error) {
	out := new(admin.ComputeAccountSizeResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ComputeAccountSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUsers(ctx context.Context, in *admin.ListUsersRequest, opts ...grpc.CallOption) (*admin.ListUsersResponse, error) {
	out := new(admin.ListUsersResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ManageUser(ctx context.Context, in *admin.ManageUserRequest, opts ...grpc.CallOption) (*admin.ManageUserResponse, error) {
	out := new(admin.ManageUserResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ManageUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateCorpusEnablement(ctx context.Context, in *admin.UpdateCorpusEnablementRequest, opts ...grpc.CallOption) (*admin.UpdateCorpusEnablementResponse, error) {
	out := new(admin.UpdateCorpusEnablementResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/UpdateCorpusEnablement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ReplaceCorpusFilterAttrs(ctx context.Context, in *admin.ReplaceCorpusFilterAttrsRequest, opts ...grpc.CallOption) (*admin.ReplaceCorpusFilterAttrsResponse, error) {
	out := new(admin.ReplaceCorpusFilterAttrsResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ReplaceCorpusFilterAttrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetUsageMetrics(ctx context.Context, in *admin.UsageMetricsRequest, opts ...grpc.CallOption) (*admin.UsageMetricsResponse, error) {
	out := new(admin.UsageMetricsResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/GetUsageMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateApiKey(ctx context.Context, in *admin.CreateApiKeyRequest, opts ...grpc.CallOption) (*admin.CreateApiKeyResponse, error) {
	out := new(admin.CreateApiKeyResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/CreateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EnableApiKey(ctx context.Context, in *admin.EnableApiKeyRequest, opts ...grpc.CallOption) (*admin.EnableApiKeyResponse, error) {
	out := new(admin.EnableApiKeyResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/EnableApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteApiKey(ctx context.Context, in *admin.DeleteApiKeyRequest, opts ...grpc.CallOption) (*admin.DeleteApiKeyResponse, error) {
	out := new(admin.DeleteApiKeyResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/DeleteApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListApiKeys(ctx context.Context, in *admin.ListApiKeysRequest, opts ...grpc.CallOption) (*admin.ListApiKeysResponse, error) {
	out := new(admin.ListApiKeysResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.AdminService/ListApiKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	CreateCorpus(context.Context, *admin.CreateCorpusRequest) (*admin.CreateCorpusResponse, error)
	DeleteCorpus(context.Context, *admin.DeleteCorpusRequest) (*admin.DeleteCorpusResponse, error)
	ResetCorpus(context.Context, *admin.ResetCorpusRequest) (*admin.ResetCorpusResponse, error)
	ListCorpora(context.Context, *admin.ListCorporaRequest) (*admin.ListCorporaResponse, error)
	ListJobs(context.Context, *admin.ListJobsRequest) (*admin.ListJobsResponse, error)
	// Return information about corpora.
	ReadCorpus(context.Context, *admin.ReadCorpusRequest) (*admin.ReadCorpusResponse, error)
	ComputeCorpusSize(context.Context, *admin.ComputeCorpusSizeRequest) (*admin.ComputeCorpusSizeResponse, error)
	ComputeAccountSize(context.Context, *admin.ComputeAccountSizeRequest) (*admin.ComputeAccountSizeResponse, error)
	ListUsers(context.Context, *admin.ListUsersRequest) (*admin.ListUsersResponse, error)
	ManageUser(context.Context, *admin.ManageUserRequest) (*admin.ManageUserResponse, error)
	UpdateCorpusEnablement(context.Context, *admin.UpdateCorpusEnablementRequest) (*admin.UpdateCorpusEnablementResponse, error)
	ReplaceCorpusFilterAttrs(context.Context, *admin.ReplaceCorpusFilterAttrsRequest) (*admin.ReplaceCorpusFilterAttrsResponse, error)
	// Get metric usage of either sliding windows or between two timestamps
	GetUsageMetrics(context.Context, *admin.UsageMetricsRequest) (*admin.UsageMetricsResponse, error)
	CreateApiKey(context.Context, *admin.CreateApiKeyRequest) (*admin.CreateApiKeyResponse, error)
	EnableApiKey(context.Context, *admin.EnableApiKeyRequest) (*admin.EnableApiKeyResponse, error)
	DeleteApiKey(context.Context, *admin.DeleteApiKeyRequest) (*admin.DeleteApiKeyResponse, error)
	ListApiKeys(context.Context, *admin.ListApiKeysRequest) (*admin.ListApiKeysResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) CreateCorpus(context.Context, *admin.CreateCorpusRequest) (*admin.CreateCorpusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCorpus not implemented")
}
func (UnimplementedAdminServiceServer) DeleteCorpus(context.Context, *admin.DeleteCorpusRequest) (*admin.DeleteCorpusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCorpus not implemented")
}
func (UnimplementedAdminServiceServer) ResetCorpus(context.Context, *admin.ResetCorpusRequest) (*admin.ResetCorpusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCorpus not implemented")
}
func (UnimplementedAdminServiceServer) ListCorpora(context.Context, *admin.ListCorporaRequest) (*admin.ListCorporaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCorpora not implemented")
}
func (UnimplementedAdminServiceServer) ListJobs(context.Context, *admin.ListJobsRequest) (*admin.ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedAdminServiceServer) ReadCorpus(context.Context, *admin.ReadCorpusRequest) (*admin.ReadCorpusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCorpus not implemented")
}
func (UnimplementedAdminServiceServer) ComputeCorpusSize(context.Context, *admin.ComputeCorpusSizeRequest) (*admin.ComputeCorpusSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeCorpusSize not implemented")
}
func (UnimplementedAdminServiceServer) ComputeAccountSize(context.Context, *admin.ComputeAccountSizeRequest) (*admin.ComputeAccountSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeAccountSize not implemented")
}
func (UnimplementedAdminServiceServer) ListUsers(context.Context, *admin.ListUsersRequest) (*admin.ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAdminServiceServer) ManageUser(context.Context, *admin.ManageUserRequest) (*admin.ManageUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageUser not implemented")
}
func (UnimplementedAdminServiceServer) UpdateCorpusEnablement(context.Context, *admin.UpdateCorpusEnablementRequest) (*admin.UpdateCorpusEnablementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCorpusEnablement not implemented")
}
func (UnimplementedAdminServiceServer) ReplaceCorpusFilterAttrs(context.Context, *admin.ReplaceCorpusFilterAttrsRequest) (*admin.ReplaceCorpusFilterAttrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceCorpusFilterAttrs not implemented")
}
func (UnimplementedAdminServiceServer) GetUsageMetrics(context.Context, *admin.UsageMetricsRequest) (*admin.UsageMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageMetrics not implemented")
}
func (UnimplementedAdminServiceServer) CreateApiKey(context.Context, *admin.CreateApiKeyRequest) (*admin.CreateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKey not implemented")
}
func (UnimplementedAdminServiceServer) EnableApiKey(context.Context, *admin.EnableApiKeyRequest) (*admin.EnableApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableApiKey not implemented")
}
func (UnimplementedAdminServiceServer) DeleteApiKey(context.Context, *admin.DeleteApiKeyRequest) (*admin.DeleteApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiKey not implemented")
}
func (UnimplementedAdminServiceServer) ListApiKeys(context.Context, *admin.ListApiKeysRequest) (*admin.ListApiKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiKeys not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_CreateCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.CreateCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/CreateCorpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateCorpus(ctx, req.(*admin.CreateCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.DeleteCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/DeleteCorpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteCorpus(ctx, req.(*admin.DeleteCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResetCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ResetCorpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCorpus(ctx, req.(*admin.ResetCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListCorpora_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ListCorporaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListCorpora(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ListCorpora",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListCorpora(ctx, req.(*admin.ListCorporaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListJobs(ctx, req.(*admin.ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ReadCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ReadCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ReadCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ReadCorpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ReadCorpus(ctx, req.(*admin.ReadCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ComputeCorpusSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ComputeCorpusSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ComputeCorpusSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ComputeCorpusSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ComputeCorpusSize(ctx, req.(*admin.ComputeCorpusSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ComputeAccountSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ComputeAccountSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ComputeAccountSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ComputeAccountSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ComputeAccountSize(ctx, req.(*admin.ComputeAccountSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUsers(ctx, req.(*admin.ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ManageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ManageUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ManageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ManageUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ManageUser(ctx, req.(*admin.ManageUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateCorpusEnablement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.UpdateCorpusEnablementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateCorpusEnablement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/UpdateCorpusEnablement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateCorpusEnablement(ctx, req.(*admin.UpdateCorpusEnablementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ReplaceCorpusFilterAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ReplaceCorpusFilterAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ReplaceCorpusFilterAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ReplaceCorpusFilterAttrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ReplaceCorpusFilterAttrs(ctx, req.(*admin.ReplaceCorpusFilterAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetUsageMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.UsageMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetUsageMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/GetUsageMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetUsageMetrics(ctx, req.(*admin.UsageMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.CreateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/CreateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateApiKey(ctx, req.(*admin.CreateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EnableApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.EnableApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EnableApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/EnableApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EnableApiKey(ctx, req.(*admin.EnableApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.DeleteApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/DeleteApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteApiKey(ctx, req.(*admin.DeleteApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ListApiKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.AdminService/ListApiKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListApiKeys(ctx, req.(*admin.ListApiKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.vectara.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCorpus",
			Handler:    _AdminService_CreateCorpus_Handler,
		},
		{
			MethodName: "DeleteCorpus",
			Handler:    _AdminService_DeleteCorpus_Handler,
		},
		{
			MethodName: "ResetCorpus",
			Handler:    _AdminService_ResetCorpus_Handler,
		},
		{
			MethodName: "ListCorpora",
			Handler:    _AdminService_ListCorpora_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _AdminService_ListJobs_Handler,
		},
		{
			MethodName: "ReadCorpus",
			Handler:    _AdminService_ReadCorpus_Handler,
		},
		{
			MethodName: "ComputeCorpusSize",
			Handler:    _AdminService_ComputeCorpusSize_Handler,
		},
		{
			MethodName: "ComputeAccountSize",
			Handler:    _AdminService_ComputeAccountSize_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _AdminService_ListUsers_Handler,
		},
		{
			MethodName: "ManageUser",
			Handler:    _AdminService_ManageUser_Handler,
		},
		{
			MethodName: "UpdateCorpusEnablement",
			Handler:    _AdminService_UpdateCorpusEnablement_Handler,
		},
		{
			MethodName: "ReplaceCorpusFilterAttrs",
			Handler:    _AdminService_ReplaceCorpusFilterAttrs_Handler,
		},
		{
			MethodName: "GetUsageMetrics",
			Handler:    _AdminService_GetUsageMetrics_Handler,
		},
		{
			MethodName: "CreateApiKey",
			Handler:    _AdminService_CreateApiKey_Handler,
		},
		{
			MethodName: "EnableApiKey",
			Handler:    _AdminService_EnableApiKey_Handler,
		},
		{
			MethodName: "DeleteApiKey",
			Handler:    _AdminService_DeleteApiKey_Handler,
		},
		{
			MethodName: "ListApiKeys",
			Handler:    _AdminService_ListApiKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentServiceClient interface {
	// Returns a list of documents for customer/corpus with pagination and optional document metadata filtering.
	ListDocuments(ctx context.Context, in *lists.ListDocumentsRequest, opts ...grpc.CallOption) (*lists.ListDocumentsResponse, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) ListDocuments(ctx context.Context, in *lists.ListDocumentsRequest, opts ...grpc.CallOption) (*lists.ListDocumentsResponse, error) {
	out := new(lists.ListDocumentsResponse)
	err := c.cc.Invoke(ctx, "/com.vectara.DocumentService/ListDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations must embed UnimplementedDocumentServiceServer
// for forward compatibility
type DocumentServiceServer interface {
	// Returns a list of documents for customer/corpus with pagination and optional document metadata filtering.
	ListDocuments(context.Context, *lists.ListDocumentsRequest) (*lists.ListDocumentsResponse, error)
	mustEmbedUnimplementedDocumentServiceServer()
}

// UnimplementedDocumentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentServiceServer struct {
}

func (UnimplementedDocumentServiceServer) ListDocuments(context.Context, *lists.ListDocumentsRequest) (*lists.ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedDocumentServiceServer) mustEmbedUnimplementedDocumentServiceServer() {}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s grpc.ServiceRegistrar, srv DocumentServiceServer) {
	s.RegisterService(&DocumentService_ServiceDesc, srv)
}

func _DocumentService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lists.ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vectara.DocumentService/ListDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).ListDocuments(ctx, req.(*lists.ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentService_ServiceDesc is the grpc.ServiceDesc for DocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.vectara.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDocuments",
			Handler:    _DocumentService_ListDocuments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
